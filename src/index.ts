import { Probot } from 'probot';
import { AiderClient, AiderOptions } from './aider.js';
import { GitHubClient } from './github.js';
import config from './config.js';

export default (app: Probot) => {
  // Listen for issues being labeled
  app.on(['issues.labeled'], async (context) => {
    const github = new GitHubClient(context);
    
    // Check if the issue was labeled with our trigger label
    const label = context.payload.label;
    if (!label) return;
    
    const triggerLabels = [config.triggerLabel].concat(config.additionalTriggerLabels || []);
    if (!triggerLabels.includes(label.name)) {
      return;
    }
    
    console.log(`Processing issue with label: ${label.name}`);
    
    try {
      const issueDetails = github.getIssueDetails();
      
      // Add a comment to the issue indicating we're processing it
      await github.addIssueComment(config.processingComment);
      
      // Add a reaction to acknowledge the label
      await github.addReaction('eyes');
      
      // Get repository information
      const defaultBranch = await github.getDefaultBranch();
      const repoCloneUrl = await github.getRepositoryCloneUrl();
      const { owner, repo } = github.getRepoInfo();
      
      // Check if repository is private and get auth token if needed
      const isPrivate = await github.isPrivateRepository();
      let authToken: string | undefined;
      if (isPrivate) {
        console.log('Repository is private. Generating auth token for Git operations.');
        authToken = await github.getInstallationToken();
      }
      
      // Create a branch name for the fix
      let branchName = `${config.branchPrefix || 'aider-fix-'}issue-${issueDetails.issue_number}`;
      
      // Check if branch already exists
      const branchExists = await github.branchExists(branchName);
      if (branchExists) {
        console.log(`Branch ${branchName} already exists. Adding a unique identifier.`);
        const timestamp = Date.now();
        branchName = `${branchName}-${timestamp}`;
      }
      
      // Configure Aider options
      const aiderOptions: AiderOptions = {
        timeout: config.aiderTimeout,
        model: config.aiderModel,
        extraArgs: config.aiderExtraArgs,
      };
      
      // Initialize Aider client
      const aider = new AiderClient(aiderOptions);
      await aider.init();
      
      // Run Aider to fix the issue
      const result = await aider.fixIssue(
        repoCloneUrl,
        issueDetails.title,
        issueDetails.body,
        branchName,
        authToken
      );
      
      if (result.success) {
        console.log('Aider successfully applied fixes. Creating pull request.');
        
        // Create a detailed PR body
        const prBody = `
## AI-generated fix for issue #${issueDetails.issue_number}

This PR was automatically generated by the Aider bot to address issue #${issueDetails.issue_number}.

### Issue Description
${issueDetails.title}

${issueDetails.body}

### Changes Made
${result.changes.map(file => `- \`${file}\``).join('\n')}

---
This PR was created automatically by the Aider bot. Please review the changes carefully before merging.
        `.trim();
        
        // Create a pull request with the changes
        const pullRequest = await github.createPullRequest({
          owner,
          repo,
          title: `${config.prTitlePrefix || 'Fix:'}${issueDetails.title}`,
          body: prBody,
          head: branchName,
          base: defaultBranch,
          draft: config.prDraft || false,
          maintainer_can_modify: true
        });
        
        // Add labels to the pull request
        if (config.prLabels && config.prLabels.length > 0) {
          await github.addLabelsToPullRequest(pullRequest.data.number, config.prLabels);
        }
        
        // Add a comment to the issue with the pull request link
        const successComment = `${config.successComment}\n\nCheck out the PR: ${pullRequest.data.html_url}`;
        await github.addIssueComment(successComment);
        
        // Add a 'hooray' reaction to the issue to indicate success
        await github.addReaction('hooray');
      } else {
        console.log(`Aider failed to fix the issue: ${result.message}`);
        // Add a comment to the issue indicating the failure
        const failureComment = `${config.failureComment}\n\n${result.message}`;
        await github.addIssueComment(failureComment);
        
        // Add a 'confused' reaction to the issue to indicate failure
        await github.addReaction('confused');
      }
    } catch (error) {
      console.error('Error processing issue with Aider:', error);
      // Add a comment to the issue about the error
      const errorMessage = error instanceof Error ? error.message : String(error);
      await github.addIssueComment(`${config.failureComment}\n\nError: ${errorMessage}`);
      
      // Add a 'confused' reaction to the issue to indicate failure
      await github.addReaction('confused');
    }
  });

  // Listen for new issues
  app.on('issues.opened', async (context) => {
    const github = new GitHubClient(context);
    
    try {
      const issueDetails = github.getIssueDetails();
      
      // Check if the issue already has our trigger label or any of our additional trigger labels
      const triggerLabels = [config.triggerLabel].concat(config.additionalTriggerLabels || []);
      const shouldProcess = triggerLabels.some(label => issueDetails.labels.includes(label));
      
      if (shouldProcess) {
        // Add a comment to the issue indicating we're processing it
        await github.addIssueComment(config.processingComment);
        
        // Add a reaction to acknowledge
        await github.addReaction('eyes');
        
        // Get repository information
        const defaultBranch = await github.getDefaultBranch();
        const repoCloneUrl = await github.getRepositoryCloneUrl();
        const { owner, repo } = github.getRepoInfo();
        
        // Check if repository is private and get auth token if needed
        const isPrivate = await github.isPrivateRepository();
        let authToken: string | undefined;
        if (isPrivate) {
          console.log('Repository is private. Generating auth token for Git operations.');
          authToken = await github.getInstallationToken();
        }
        
        // Create a branch name for the fix
        let branchName = `${config.branchPrefix || 'aider-fix-'}issue-${issueDetails.issue_number}`;
        
        // Check if branch already exists
        const branchExists = await github.branchExists(branchName);
        if (branchExists) {
          console.log(`Branch ${branchName} already exists. Adding a unique identifier.`);
          const timestamp = Date.now();
          branchName = `${branchName}-${timestamp}`;
        }
        
        // Configure Aider options
        const aiderOptions: AiderOptions = {
          timeout: config.aiderTimeout,
          model: config.aiderModel,
          extraArgs: config.aiderExtraArgs,
        };
        
        // Initialize Aider client
        const aider = new AiderClient(aiderOptions);
        await aider.init();
        
        // Run Aider to fix the issue
        const result = await aider.fixIssue(
          repoCloneUrl,
          issueDetails.title,
          issueDetails.body,
          branchName,
          authToken
        );
        
        if (result.success) {
          console.log('Aider successfully applied fixes. Creating pull request.');
          
          // Create a detailed PR body
          const prBody = `
## AI-generated fix for issue #${issueDetails.issue_number}

This PR was automatically generated by the Aider bot to address issue #${issueDetails.issue_number}.

### Issue Description
${issueDetails.title}

${issueDetails.body}

### Changes Made
${result.changes.map(file => `- \`${file}\``).join('\n')}

---
This PR was created automatically by the Aider bot. Please review the changes carefully before merging.
          `.trim();
          
          // Create a pull request with the changes
          const pullRequest = await github.createPullRequest({
            owner,
            repo,
            title: `${config.prTitlePrefix || 'Fix:'}${issueDetails.title}`,
            body: prBody,
            head: branchName,
            base: defaultBranch,
            draft: config.prDraft || false,
            maintainer_can_modify: true
          });
          
          // Add labels to the pull request
          if (config.prLabels && config.prLabels.length > 0) {
            await github.addLabelsToPullRequest(pullRequest.data.number, config.prLabels);
          }
          
          // Add a comment to the issue with the pull request link
          const successComment = `${config.successComment}\n\nCheck out the PR: ${pullRequest.data.html_url}`;
          await github.addIssueComment(successComment);
          
          // Add a 'hooray' reaction to the issue to indicate success
          await github.addReaction('hooray');
        } else {
          console.log(`Aider failed to fix the issue: ${result.message}`);
          // Add a comment to the issue indicating the failure
          const failureComment = `${config.failureComment}\n\n${result.message}`;
          await github.addIssueComment(failureComment);
          
          // Add a 'confused' reaction to the issue to indicate failure
          await github.addReaction('confused');
        }
      }
    } catch (error) {
      console.error('Error processing new issue:', error);
      // Don't add a comment here as it might not be relevant to all new issues
    }
  });
};
