# The ID of your GitHub App
APP_ID=
WEBHOOK_SECRET=development

# Use `trace` to get verbose logging or `info` to show less
LOG_LEVEL=debug

# Go to https://smee.io/new set this to the URL that you are redirected to.
WEBHOOK_PROXY_URL=

# GitHub App Setup (required)
# Your GitHub App's private key, get this from the GitHub App settings page
# To generate: Go to https://github.com/settings/apps -> Your app -> General -> Private keys -> Generate a private key
#
# You need EITHER Option 1 OR Option 2 below (not both):
#
# OPTION 1: Copy the contents of the downloaded .pem file and paste it here
# For multi-line values in .env, use quotes and \n for line breaks:
PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----
...
-----END RSA PRIVATE KEY-----"

# OPTION 2: Specify the path to your private key file (recommended for security)
# PRIVATE_KEY_PATH=/path/to/your/private-key.pem

# patchmycode Configuration
# API keys for LLM services (required for code fixing)
# OpenAI API Key - Required for GPT models
OPENAI_API_KEY=
# Anthropic API Key - Required for Claude models
ANTHROPIC_API_KEY=
# OpenRouter API Key - Optional for access to multiple models through OpenRouter
OPENROUTER_API_KEY=

# Multiple key setup (optional)
# For load balancing or fallbacks, you can configure multiple API keys
# Separate multiple keys with commas (,)
OPENAI_API_KEYS=key1,key2,key3
ANTHROPIC_API_KEYS=key1,key2,key3

# Model provider configuration
# Explicitly specify which provider to use (openai, anthropic, openrouter)
# This overrides automatic detection based on model name
PATCH_MODEL_PROVIDER=openai

# Mode-specific model providers (optional)
PATCH_MODEL_PROVIDER_ARCHITECT=anthropic
PATCH_MODEL_PROVIDER_PATCHER=openai
PATCH_MODEL_PROVIDER_HYBRID_SECURITY=anthropic
PATCH_MODEL_PROVIDER_HYBRID_PERFORMANCE=openai
PATCH_MODEL_PROVIDER_HYBRID_TYPESCRIPT=openai

# Label that triggers patchmycode to fix an issue
PATCH_TRIGGER_LABEL=fix:auto
# Additional labels that can trigger fixes (comma-separated)
PATCH_ADDITIONAL_TRIGGER_LABELS=

# Timeouts
PATCH_TIMEOUT=300000
GIT_TIMEOUT=60000

# Labels to add to created pull requests (comma-separated)
PATCH_PR_LABELS=automated-fix,patchmycode-generated

# Comment templates
PATCH_PROCESSING_COMMENT="ü§ñ I'm working on fixing this issue automatically..."
PATCH_SUCCESS_COMMENT="‚úÖ I've created a pull request with a fix for this issue."
PATCH_FAILURE_COMMENT="‚ùå I wasn't able to automatically fix this issue."

# Mode-specific model configuration
# Default model to use for all modes if mode-specific models aren't specified
PATCH_MODEL=gpt-4o

# Mode-specific models (optional)
PATCH_MODEL_ARCHITECT=claude-3-7-sonnet-20250219
PATCH_MODEL_PATCHER=gpt-4o
PATCH_MODEL_HYBRID_SECURITY=claude-3-opus-20240229
PATCH_MODEL_HYBRID_PERFORMANCE=gpt-4o-mini
PATCH_MODEL_HYBRID_TYPESCRIPT=gpt-4o

# Default processing mode
PATCH_DEFAULT_MODE=patcher

# Additional arguments to pass to the AI engine (comma-separated)
# For Claude models, older versions required --use-anthropic but newer versions use --sonnet, --opus, etc. flags
# The appropriate flag will be added automatically based on the model name
PATCH_EXTRA_ARGS=

# Mode-specific extra arguments (comma-separated, optional)
# PATCH_EXTRA_ARGS_ARCHITECT=--extra-arg
# PATCH_EXTRA_ARGS_PATCHER=--timeout=300
# PATCH_EXTRA_ARGS_HYBRID_SECURITY=--security-focus

# Multi-pass processing configuration
PATCH_ENABLE_MULTIPASS=true
PATCH_MULTIPASS_SEQUENCE=architect,patcher

# Branch configuration
PATCH_BRANCH_PREFIX=patch-fix-

# Pull request configuration
PATCH_PR_TITLE_PREFIX=Fix: 
PATCH_PR_DRAFT=false

# Repository configuration
# Files to include in analysis (glob patterns, comma-separated)
PATCH_INCLUDE_FILES=
# Files to exclude from analysis (glob patterns, comma-separated)
PATCH_EXCLUDE_FILES=node_modules/**,.git/**

# Repository specific configuration path
PATCH_CONFIG_PATH=.patchmycode/config.json
